@using FirstBlazorApp.Auth;
@using ForumAdminPanel.Models;
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navManager;
@inject ForumService forumService


<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="d-flex nav-bar">
        <div class="top-row ps-3 navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="">FirstBlazorApp</a>
                <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="forums">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Forums
            </NavLink>
        </div>
 
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="testusers">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Users
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="chat">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Chat
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="imageupload">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Image
            </NavLink>
        </div>
        <div class="d-flex flex-row gap-2">
            <btn class="btn btn-outline-info href="https://docs.microsoft.com/aspnet/" target="_blank">About</btn>
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-outline-light" @onclick="GoToMyProfile">My Profile</button>
                    <a class="btn btn-outline-danger" @onclick="Logout" href="javascript:void(0)">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-outline-success" href="/login">Login</a>
                    <a class="btn btn-outline-info" href="/registeruser">Register</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        
        @*All logedin *@
        <AuthorizeView Roles="1,2">
            <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </div>
            </Authorized>
        </AuthorizeView>

        @*Administrator onyl*@
        <AuthorizeView Roles="1">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="fetchdata">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    List<Fora> forasList = new();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    User user = new User();

    string userProfileLink = "";

    protected override async Task OnInitializedAsync()
    {
        forasList = await forumService.GetAllForumsAsync();
    }

    //private async Task<string> GetUserProfileLink()
    //{

    //    if ((AuthProccedure)authenticationStateProvider != null)
    //    {
    //        var customAuthstateProvider = (AuthProccedure)authenticationStateProvider;
    //        user = await customAuthstateProvider.GetCurrentUserAsync();

    //        userProfileLink = "userprofile" + user.Id.ToString();

    //        return userProfileLink;
    //    }
    //    else { return null; }
    //}

    public async Task GoToMyProfile()
    {
        
        if ((AuthProccedure)authenticationStateProvider != null)
        {
            var customAuthstateProvider = (AuthProccedure)authenticationStateProvider;
            user = await customAuthstateProvider.GetCurrentUserAsync();
            navManager.NavigateTo("/userprofile/"+user.Id, true);
        }
        
    }

    public async Task Logout()
    {
        var authProccedure = (AuthProccedure)authenticationStateProvider;
        await authProccedure.UpadateAuthState(null);
        navManager.NavigateTo("/", true);
    }
}
