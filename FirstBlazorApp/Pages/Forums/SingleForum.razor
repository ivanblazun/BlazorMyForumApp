@using ForumAdminPanel.Models;
@using FirstBlazorApp.Pages.Themes
@using FirstBlazorApp.Auth
@page "/singleforum/{id:int}"
@inject ThemeService themeService
@inject NavigationManager navManager
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider

<div class="">
        <div>
            <button class="btn btn-outline-info" @onclick="(()=>navManager.NavigateTo(locationForums,true))">Return to forums</button>
        </div>
    <div class="d-flex  gap-1">
        <div class="d-flex flex-column gap-1">
            <label for="serachthemes">Search for themes</label>
            <input type="text" @oninput="SearchThemesaction" 
                placeholder="Search themes" />
        </div>
        <AuthorizeView Roles="1,2">
            <Authorized>
        <div>
            <button class="btn btn-outline-primary" @onclick="OpenModal">Add new theme</button>
        </div>
           </Authorized>
            <NotAuthorized>
                <small style="color:red">Only power users and admins can add new theme</small>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="row">
        @foreach (var theme in themes)
        {   
            <ThemeComponent ForumId="id" theme="theme"></ThemeComponent>
        }
    </div>

</div>
<AuthorizeView>
    <Authorized>
        @if (addThemeModalOn)
        {
            <AddNewThemeModalComponent CloseModal="CloseModal" ForumId="id"></AddNewThemeModalComponent>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int id { get; set; }

    public string SearchInput { get; set; }

    bool addThemeModalOn = false;

    List<Theme>? themes = new List<Theme>();

    List<Theme> searchthemes;

    string locationForums = "/forums";

    protected override async Task OnInitializedAsync()
    {
        themes = await themeService.GetAllThemesFromForumAsync(id);
    }

    private void SearchThemesaction(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {

        SearchInput = (string)args.Value;
        SearchInput = SearchInput.ToLowerInvariant();

        themes = themeService.SearchThemes(SearchInput, SearchInput);
        StateHasChanged();
    }

    private void OpenModal()
    {   
        addThemeModalOn = true; 
    }

    async Task CloseModal()
    {
        addThemeModalOn = false;
        themes = await themeService.GetAllThemesFromForumAsync(id);
    }
}
