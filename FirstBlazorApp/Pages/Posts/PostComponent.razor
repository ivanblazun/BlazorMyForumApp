@using FirstBlazorApp.Pages.Images;
@using ForumAdminPanel.Models;
@using FirstBlazorApp.Pages.Answers
@using FirstBlazorApp.Auth
@inject PostService postService
@inject AnswerService answerService
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ImageService imageService

<div class="card">
    <div class="card-header">
        @Post.Title
        <p>@Post.TimePostCreated</p>
    </div>
    <div class="card-body">
        <h5 class="card-title">@postUser.UserName</h5>
        <PostImageDisplayComponent CurrentPost="Post"></PostImageDisplayComponent>
        <p class="card-text">@Post.Body</p>
         <AuthorizeView>
             <Authorized>
              <button class="btn btn-primary" @onclick="(()=>{AddAnswer(Post.Id);})">Give Answer</button>
            </Authorized>
        </AuthorizeView>
        <button type="button" class="btn btn-secondary" @onclick="(()=>{navManager.NavigateTo(updatePostLocation+Post.Id,true);})">Edit</button>
        <button type="button" class="btn btn-warning" @onclick="(()=>{DeletePost.InvokeAsync(Post);})">Delete</button>
    </div>
    <div>
        @if (answerService.GetAnswersForPost(Post.Id) != null)
        {
            <ul class="flex-column">
                @foreach (var answer in answerService.GetAnswersForPost(Post.Id))
                {
                    <li class="list-group-item">
                        <AnswerComponent Answer="answer"></AnswerComponent>          
                    </li>
                }
            </ul>
        }
        
    </div>
   
    @if (viewGiveAnswer)
    {
        <CreateAnswerComponent AddAnswer="AddNewAnswer" Post="Post"></CreateAnswerComponent>
    }
     
</div>

@code {
    [Parameter]
    public Post Post { get; set; }
    [Parameter]
    public Theme Theme { get; set; }

    [Parameter]
    public EventCallback<Post> DeletePost{ get; set; }
    [Parameter]
    public EventCallback<Post> UpdatePost{ get; set; }

    string updatePostLocation = "/updatepost/";

    bool viewGiveAnswer = false;

    public void AddAnswer(int postId)
    {
        viewGiveAnswer = true;
    }

    User CurrentUser = new User();


    User postUser = new();
    protected override async Task OnInitializedAsync()
    {
        postUser = await postService.GetUserCreatorOfPost(Post.UserId);
    }

 

    async Task AddNewAnswer(Answer answer)
    {
        var customAuthstateProvider = (AuthProccedure)authStateProvider;
        User user= await customAuthstateProvider.GetCurrentUserAsync();

        await answerService.CreateAnswerAsync(Post.Id, user.Id, answer);
        answerService.GetAnswersForPost(Post.Id);
        viewGiveAnswer = false;

    }
}
