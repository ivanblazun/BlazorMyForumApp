@page "/posts/{id:int}"
@using FirstBlazorApp.Services
@using ForumAdminPanel.Models;
@inject PostService postService
@inject NavigationManager navManager
@inject ThemeService themeService

<div class="d-flex m-1 gap-1">
    <span class="border border-primary-subtle m-1 p-1  fs-4">@currentTheme.Title</span>
    <br>
    <span class="border border-secondary-subtle m-1 p-1 rounded-pill fs-4">Theme opened: @currentTheme.TimeThemeCreated</span>
</div>
@if(addPostModalOn)
{
    <AddPostModalComponent CloseModal="CloseModal" ThemeId="id"></AddPostModalComponent>
}
<AuthorizeView>
    <Authorized>
        <button class="btn btn-success mb-1" @onclick="OpenModal">Add post</button>
        <button class="btn btn-info mb-1" @onclick="(()=>navManager.NavigateTo(locationForum + currentTheme.ForumId.ToString(),true))">Return to themes</button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-info mb-1" @onclick="(()=>navManager.NavigateTo(locationForum + currentTheme.ForumId.ToString(),true))">Return to themes</button>
        <small style="color:red">Login to add new post</small>
    </NotAuthorized>
</AuthorizeView>


@if(posts != null)
{
    @foreach (var post in posts)
    {
        <PostComponent DeletePost="DeletePostAction" Post="post"></PostComponent>
    }
}
else
{
    <p>No posts createdin this theme!</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    Theme currentTheme = new Theme();

    List<Post> posts = new List<Post>();

    protected override async Task OnInitializedAsync()
    {
        GetCurrentTheme();
        posts = await postService.GetAllPostsFromThemeAsync(id);
    }

    bool addPostModalOn = false;

    string locationForum = "/singleforum/";

    private void OpenModal()
    {
        addPostModalOn = true;
    }

    async Task CloseModal()
    {
        addPostModalOn = false;
        posts = await postService.GetAllPostsFromThemeAsync(id);
        StateHasChanged();
    }

    private async Task<Theme> GetCurrentTheme()
    {
        return currentTheme = await themeService.GetThemeAsync(id);
    }

    private async Task DeletePostAction(Post post)
    {
        postService.DeletePostAsync(post);
        posts = await postService.GetAllPostsFromThemeAsync(id);
        StateHasChanged();
    }

    private async Task UpdatePostAction(Post post)
    {
        
    }

}
