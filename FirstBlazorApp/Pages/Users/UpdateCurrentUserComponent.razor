@using ForumAdminPanel.Models;
@using System.ComponentModel.DataAnnotations;
@inject UserService userService
@inject NavigationManager navManager
@inject IJSRuntime js
<h5 style="border:1px grey solid; border-radius:5px" class="p-2">Update User Properties</h5>

<div style="max-width:fit-content">
    <EditForm Model="@CurrentUser" OnSubmit="@SaveChanges">
        <div class="mb-3">
            <label for="username" class="form-label">UserName</label>
            <input type="text" class="form-control" id="username" placeholder="CurrentUser.UserName" @bind="@CurrentUser.UserName">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" placeholder="@user.Email" @bind="CurrentUser.Email">
        </div>
        <div class="mb-3">
            <label for="userpassword" class="form-label">Password</label>
            <input type="text" class="form-control" id="userpassword" placeholder="Type new password..." @bind="CurrentUser.Password">
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

</div>

@code {
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public User CurrentUser { get; set;}

    //private class Model
    //{
    //    [Required(ErrorMessage = "User name is required")]
    //    public string UserName { get; set; }

    //    [Required(ErrorMessage = "Email is required")]
    //    public string Email { get; set; }

    //    [Required(ErrorMessage = "Enter password")]
    //    [DataType(DataType.Password)]
    //    public string Password { get; set; }

    //    [Compare(nameof(Password), ErrorMessage = "Password mismatch")]
    //    public string PasswordConfirm { get; set; }
    //}

    private User user { get; set; }

    private void SaveChanges()
    {
        userService.UpdateUser(CurrentUser);
        js.InvokeVoidAsync("alert","User shanges saved");
        string location = "/userprofile/" + CurrentUser.Id.ToString();
        navManager.NavigateTo(location, true);
    }

    protected override async Task OnInitializedAsync()
    {
        user = userService.GetUser(id);
    }
}   
