@using ForumAdminPanel.Models;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navManager
@inject ThemeService themeService
@inject IJSRuntime js
@inject ImageService imageService

<div class="g-col-3 m-1 mt-1 shadow">
    <div class="">
        <div class="card-body">
            <div class="d-flex gap-2" style="align-items:center;">
                <h5 class="card-title">@theme.Title</h5>
                <FirstBlazorApp.Pages.Images.ThemeImageDisplayComponent CurrentTheme="theme"></FirstBlazorApp.Pages.Images.ThemeImageDisplayComponent>
            </div>
            @*<h6 class="card-subtitle mb-2 text-body-secondary">@theme.Id</h6>*@
            @if (theme.ThemeBody != null)
            {
                <p class="card-text theme-body">@theme.ThemeBody</p>
            }
            <AuthorizeView Roles="1">
                 <Authorized>
                     <div class="d-flex gap-1">
                        <button type="button" @onclick="@(()=>OpenModal())" class="btn btn-outline-info btn-sm">Edit Theme</button>
                        <button type="button" @onclick="@(()=>{DeleteTheme();})" class="btn btn-outline-danger btn-sm">Delete Theme</button>
                        <button type="button" @onclick="@(()=>GetToPosts(theme.Id))" class="btn btn-outline-success btn-sm">Read Theme</button>
                     </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex flex-column">
                        <button type="button" @onclick="@(()=>GetToPosts(theme.Id))" class="btn btn-outline-success btn-sm">Read Theme</button>
                        <small style="color:red">Only admins can edit or delete theme</small>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>
@if (addThemeupdateModalOn == true )
{
    <UpdateThemeModalComponent ForumId="ForumId" Theme="@theme" ThemeId="theme.Id" CloseModal="CloseModal"></UpdateThemeModalComponent>
    
}

@code {
    [Parameter]
    public Theme? theme { get; set; }
    [Parameter]
    public int ForumId{ get; set; }

    bool addThemeupdateModalOn = false;

    bool userIsAdminOrPowerUser = false;

    private void GetToPosts(int id)
    {
        string location = "/posts/" + id.ToString();
        navManager.NavigateTo(location, true);
    }

    private async Task DeleteTheme()
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?"); 
        if (confirmed)
        {
            await themeService.DeleteTheme(theme.Id);
            navManager.NavigateTo("/singleforum/" + ForumId, true);
        }
        else{}
    } 

    private void OpenModal()
    {
        addThemeupdateModalOn = true;
    }

    async Task CloseModal()
    {
        addThemeupdateModalOn = false;
        theme = await themeService.GetThemeAsync(theme.Id);
        StateHasChanged();
    }
}
